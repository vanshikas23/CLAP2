Ques 1. Print a pattern of numbers from  to  as shown below. Each of the numbers is separated by a single space.

                            4 4 4 4 4 4 4  
                            4 3 3 3 3 3 4   
                            4 3 2 2 2 3 4   
                            4 3 2 1 2 3 4   
                            4 3 2 2 2 3 4   
                            4 3 3 3 3 3 4   
                            4 4 4 4 4 4 4   

Ans 1.
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() 
{

    int n;
    scanf("%d", &n);
  	// Complete the code to print the pattern.
    int len = n*2 - 1;
    for(int i=0;i<len;i++){
        for(int j=0;j<len;j++){
            int min = i < j? i : j;
            min = min < len-i? min : len - i - 1;
            min = min < len-j? min : len - j - 1;
            printf("%d ",n - min);
        }
         printf("\n");
    }
    return 0;
}




Ques 2.  and the sum of its digits is .

What is the sum of the digits of the number  ?

Ans.
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#define MAX 3500
char num_arr[10001][MAX];
long int sum_arr[10001] = {0};
void power(char num_arr[][MAX], int i){
    int p = i-1;
    char take_over = 0;
    char temp = 0;
    for(int j = MAX-1; j >=0; j--){
        temp = (num_arr[p][j] * 2) + take_over;
        if(temp >= 10){
            take_over = temp/10;
            num_arr[i][j] = temp%10;
        }
        else{
            num_arr[i][j] = temp;
            take_over = 0;
        }
    }
        
}


void populate_num_arr(char num_arr[][3500]){
   for(int i = 2; i < 10001; i++){
       power(num_arr, i);
   } 
}

void populate_sum_arr(long int sum_arr[], char num_arr[][MAX]){
    for(int i = 1; i < 10001; i++)
        for(int j = MAX-1; j>=0; j--)
            sum_arr[i] += num_arr[i][j];
}

int main() {
    num_arr[1][MAX-1] = 2;
    populate_num_arr(num_arr);
    populate_sum_arr(sum_arr, num_arr);
    int t;
    scanf("%d", &t);
    while(t--){
        int n;
        scanf("%d", &n);
        printf("%ld\n", sum_arr[n]);
    }
    return 0;
}



Ques 3. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with  and , the first  terms will be:

By considering the terms in the Fibonacci sequence whose values do not exceed , find the sum of the even-valued terms.


Ans. 
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

int main(){
 long long int testcase;
 scanf("%lld",&testcase);
 while(testcase--)
 {
  long long int value,fact=0,temp=0,odd=1,even=2,count=0;
  scanf("%lld",&value);
  temp=value;
  while(temp--)
  {
   fact=odd+even;
   odd=even;
   even=fact;
   if(value>fact)
   {
   if(fact%2==0)
   count+=fact;
   }
   else
   break;
   
  }
  printf("%lld\n",count+2);
    }
    return 0;
}



Ques 4. Given a sentence,s, print each word of the sentence in a new line.


Ans. 
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#include <string.h>
#include <math.h>
#include <stdlib.h>

int main()
{
    char *s;
    s = malloc(1024 * sizeof(char));
    scanf("%[^\n]", s);
    int len = strlen(s);

    for (int i = 0; i< len; i++)
    {    
        if (s[i]!=' ')
        {
            printf("%c", s[i]);
        }
        else{
            printf("\n");
        }
    }
    return 0;
}



Ques 5.If we list all the natural numbers below  that are multiples of  or , we get  and . The sum of these multiples is .

Find the sum of all the multiples of  or  below .

Ans.
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

int main(){
    unsigned int t; 
    scanf("%d",&t);
    for(int a0 = 0; a0 < t; a0++){
        unsigned int n; 
        scanf("%d",&n);
        unsigned long long int sum=0;
        unsigned long int n1=(n-1)/3,n2=(n-1)/5,n3=(n-1)/15;
        unsigned long long int sum1=(n1*(3*(n1+1)))/2;
        unsigned long long int  sum2=(n2*(5*(n2+1)))/2;
        unsigned long long int sum3=(n3*(15*(n3+1)))/2;
        sum=sum1+sum2-sum3;
        printf("%llu\n",sum);
    }
    
    return 0;
}
